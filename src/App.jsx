import React from 'react';
import {
  FlexBox,
  Heading,
  UnorderedList,
  ListItem,
  FullScreen,
  Progress,
  Appear,
  Slide,
  Deck,
  Box,
  Image,
  CodePane,
  Notes
} from 'spectacle';

const theme = {
  fonts: {
    header: '"Open Sans Condensed", Helvetica, Arial, sans-serif',
    text: '"Open Sans Condensed", Helvetica, Arial, sans-serif'
  }
};

import actionList from './action-list.png';
import cache from './cache.png';
import network from './network.png';
import stateChanges from './regular-state-change.png';

const template = () => (
  <FlexBox
    justifyContent="space-between"
    position="absolute"
    bottom={0}
    width={1}
  >
    <Box padding="0 1em">
      <FullScreen />
    </Box>
    <Box padding="1em">
      <Progress />
    </Box>
  </FlexBox>
);

function Presentation() {
  return (
    <Deck theme={theme} template={template}>
    {/* SLIDE 2 - RTK splash */}
    <Slide>
      <FlexBox height="100%" flexDirection="column">
        <Heading margin="0px" fontSize="100px">
          ✨<i>React ToolKit Query</i> ✨
        </Heading>
        <Heading margin="0px" fontSize="h3">
          React data fetching library
        </Heading>
        <Heading margin="0px 32px" color="primary" fontSize="h2">
          Write less, more intelligent code
        </Heading>
      </FlexBox>
    </Slide>

    {/* SLIDE 3 - RTK  */}
    <Slide>
      <Heading>What is RTK?</Heading>
      <UnorderedList>
        <Appear>
          <ListItem>Reduces boilerplate</ListItem>
        </Appear>
        <Appear>
          <ListItem>Helps centralize state logic</ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Helps with more granular global state
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Optimizes orchestration of different reducers
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Uses ImmerJS to make reducers "mutable"
          </ListItem>
        </Appear>
      </UnorderedList>
    </Slide>

    {/* SLIDE 4 - Simple slice sample */}
    <Slide>
      <CodePane language="jsx">
        {`
        import { createSlice, PayloadAction } from '@reduxjs/toolkit'

        interface CounterState { value: number }

        const initialState: CounterState = { value: 0 }

        const counterSlice = createSlice({
          name: 'counter',
          initialState,
          reducers: {
            incremented(state) {
              state.value++
            },
          },
        })

        export const { incremented } = counterSlice.actions
        export default counterSlice.reducer
        `}
      </CodePane>
      <p style={{ textAlign: 'center' }}>Simple slice sample</p>
    </Slide>

    {/* SLIDE 5 - RTK Query intro */}
    <Slide>
      <Heading>What is RTK Query?</Heading>
      <UnorderedList>
        <Appear>
          <ListItem>Handle data fetching with ease</ListItem>
        </Appear>
        <Appear>
          <ListItem>Use hooks to simply plug-in your queries</ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Framework agnostic
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Minimal component boilerplate
          </ListItem>
        </Appear>
      </UnorderedList>
    </Slide>
    
    {/* SLIDE 6 - Query slice sample */}
    <Slide>
      <CodePane language="jsx">
        {`
        import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
        export interface Dog { id: string; name: string }

        export const dogsSlice = createApi({
          reducerPath: 'dogs',
          baseQuery: fetchBaseQuery({
            baseUrl: 'https://api.thedogapi.com/v1',
            prepareHeaders(headers) {
              headers.set('x-api-key', process.env.DOGS_API_KEY)
              return headers
            },
          }),
          endpoints(builder) {
            return {
              fetchDogs: builder.query<Dog[], number | void>({
                query() { return '/breeds?limit=10' },
              }),
            }
          },
        })

        export const { useFetchDogsQuery } = dogsSlice // autogenerated
        `}
      </CodePane>
      <p style={{ textAlign: 'center' }}>Query slice sample</p>
    </Slide>

    {/* SLIDE 7 - Beautiful RTK Query */}
    <Slide>
      <Heading>Beautiful RTK Query</Heading>
      <UnorderedList>
        <Appear>
          <ListItem>Beautiful TypeScript support</ListItem>
        </Appear>
        <Appear>
          <ListItem>Beautiful built-in loading/error states</ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Beautiful hooks generation
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Beautiful Caching
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Beautiful debugging
          </ListItem>
        </Appear>
      </UnorderedList>
    </Slide>

    {/* SLIDE 8 - Beautiful Caching */}
    <Slide>
      <Heading>Beautiful Typescript support</Heading>
      <UnorderedList>
        <Appear>
          <ListItem>
            Type inference even for complex types
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Automatic hooks generation
          </ListItem>
        </Appear>
      </UnorderedList>
    </Slide>

    {/* SLIDE 9 - Beautiful Caching */}
    <Slide>
      <Heading>Beautiful Caching</Heading>
      <UnorderedList>
        <Appear>
          <ListItem>
            Out-of-the-box caching
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Automatic cache invalidation
          </ListItem>
        </Appear>
      </UnorderedList>
    </Slide>

    {/* SLIDE 10 - Beautiful Debugging */}
    <Slide>
      <Heading>Beautiful Debugging</Heading>
      <UnorderedList>
        <Appear>
          <ListItem>
            Network tab: easy access to API calls
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Redux tab: easy access to Redux state timeline
          </ListItem>
        </Appear>
        <Appear>
          <ListItem>
            Redux tab: easy access to cache timeline
          </ListItem>
        </Appear>
      </UnorderedList>
    </Slide>

    {/* SLIDE 11-15 - Screenshots */}
    <Slide>
      <Heading>Some useful images</Heading>
    </Slide>
    <Slide>
      <Image src={network} />
      <p style={{ textAlign: 'center' }}>Network tab: easy access to API calls</p>
    </Slide>
    <Slide>
      <Image src={stateChanges} />
      <p style={{ textAlign: 'center' }}>Redux tab: easy access to Redux state timeline</p>
    </Slide>
    <Slide>
      <Image src={actionList} />
      <p style={{ textAlign: 'center' }}>Redux tab: easy access to Redux state timeline</p>
    </Slide>
    <Slide>
      <Image src={cache} />
      <p style={{ textAlign: 'center' }}>Redux tab: easy access to cache timeline</p>
    </Slide>

    {/* SLIDE 16 - Q&A */}
    <Slide>
      <FlexBox height="100%" flexDirection="column">
        <Heading margin="0px" fontSize="100px">
          <i>Q & A</i> 
        </Heading>
        <Heading margin="0px" fontSize="h3">
          5 minutes for your questions
        </Heading>
      </FlexBox>
    </Slide>

    {/* SLIDE 17 - Goodbye */}
    <Slide>
      <FlexBox height="100%" flexDirection="column">
        <Heading margin="0px" fontSize="100px">
          <i>Thank you for attending!</i> 
        </Heading>
        <Heading margin="0px" fontSize="h3">
          Hope to see you soon with some new topics :)
        </Heading>
      </FlexBox>
    </Slide>
  </Deck>
  );
}
export default Presentation;
